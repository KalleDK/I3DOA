#pragma once

#include <iostream>
#include <algorithm>
#include "BTNode.hpp"

template <class T>
class BTNodeToolkit
{
public:
	static int getDepth(BTNode<T>*& root)
	{
		if (root == NULL)
			return 0;
		return 1 + std::max(getDepth(root->left), getDepth(root->right));
	}

	static void insert(BTNode<T>*& root, const T& data)
	{
		if (root == NULL) {
			root = new BTNode<T>(data);
		}
		else if (data <= root->data) {
			if (root->left == NULL) {
				root->left = new BTNode<T>(data);
				root->left->parent = root;
			} else {
				insert(root->left, data);
			}
		}
		else if (data > root->data) {
			if (root->right == NULL) {
				root->right = new BTNode<T>(data);
				root->right->parent = root;
			} else {
				insert(root->right, data);
			}
		}
	}
	static bool search(BTNode<T>* root, BTNode<T>*& result, const T& data)
	{
		if (root == NULL) {
			result = root;
			return false;
		}
		else if (root->data == data) {
			result = root;
			return true;
		}
		else if (root->data < data) {
			return search(root->right, result, data);
		} else {
			return search(root->left, result, data);
		}
		
	}

	static BTNode<T>* findCandidate(BTNode<T>* root)
	{
		if (root->left != NULL) {
			root = root->left;
			while (root->right != NULL)
				root = root->right;
		}
		else if ( root->right != NULL ) {
			root = root->right;
			while (root->left != NULL)
				root = root->left;
		}
		else {
			root = NULL;
		}
		return root;
	}

	static void remove(BTNode<T>*& root, T data)
	{
		BTNode<T>* node = NULL;
		BTNode<T>* cand = NULL;
		BTNode<T>* test_node = NULL;

		if (search(root, node, data));
		{
			if (node->left == NULL)
			{
				cand = node->right;
				test_node = node->parent;
			}
			else if (node->right == NULL)
			{
				cand = node->left;
				test_node = node->parent;
			}
			else
			{
				cand = node->left;
				while (cand->right != NULL)
					cand = cand->right;

				if (cand == node->left) {
					test_ptr = cand;
				}
				else {
					test_ptr = cand->parent;
					cand->parent->right = cand->left;
					if (cand->left != NULL)
						cand->left->parent = cand->parent;
					cand->left = node->left;
					cand->left->parent = cand;
				}
				cand->right = node->right;
				cand->right->parent = cand;
			
			}
			if (cand != NULL)
				cand->parent = node->parent;

			//Update parent
			if (node->parent != NULL) {
				if (node->parent->left == node) {
					node->parent->left = cand;
				}
				else {
					node->parent->right = cand;
				}
			}
		}
	}

	static T sum(BTNode<T>* root)
	{
		if (root == NULL)
			return 0;
		return root->data + sum(root->left) + sum(root->right);
	}

	static void printFull(BTNode<T>* root, int offset = 0, const int& tabsize = 1) {
		while (root->parent != NULL)
			root = root->parent;
		print(root, offset, tabsize);
	}

	static void print(BTNode<T>* root, int offset = 0, const int& tabsize = 1)
	{
		if (root == NULL)
		{
			return;
		}
		print(root->right, offset + 1, tabsize);
		std::cout << std::string(offset*tabsize, ' ') << root->data << "\n";
		print(root->left, offset + 1, tabsize);
	}

};
